# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ppqgis
                                 A QGIS plugin
 Plugin to work with pandapower networks
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-23
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Fraunhofer IEE
        email                : mike.vogt@iee.fraunhofer.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import numpy

"""
    For Windows Users:
        this plugin requires geopandas, please make sure you have its dependencies (fiona) installed
        
"""
# TODO: Write a try for geopandas import and error out without crashing

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QListWidgetItem
from qgis.core import QgsProject, QgsWkbTypes, QgsMessageLog, Qgis, QgsVectorLayer, NULL

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pandapower_import_dialog import ppImportDialog
from .pandapower_export_dialog import ppExportDialog
from .pandapower_export_summary_dialog import ppExportSummaryDialog

# install requirements
import re
import sys
import pathlib
import os.path

from typing import List

# suppress a warning from the pyproj4 package
import warnings

warnings.simplefilter(action='ignore', category=FutureWarning)


def filter_by_voltage(net, vn_kv, tol=10):
    buses = set(net.bus.loc[abs(net.bus.vn_kv - vn_kv) <= tol].index)
    lines = set(net.line.loc[net.line.from_bus.isin(buses) | net.line.to_bus.isin(buses)].index)
    return buses, lines


class ppqgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ppqgis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&pandapower QGis Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start_import = None
        self.first_start_export = None
        self.dlg_import = None
        self.dlg_export = None
        self.dlg_export_summary = None
        self.dir = None
        self.layer_id_dict = None

    def installer_func(self):
        plugin_dir = os.path.dirname(os.path.realpath(__file__))

        try:
            import pip
        except ImportError:
            QgsMessageLog.logMessage("pip missing, trying to install/update pip.",
                                     level=Qgis.MessageLevel.Info)
            exec(open(str(pathlib.Path(plugin_dir, 'scripts', 'get_pip.py'))).read())
            import pip
            import subprocess
            # just in case the included version is old
            # pip.main(['install', '--upgrade', 'pip'])
            subprocess.check_call(["pip", "install", "--upgrade", "pip"])

        sys.path.append(plugin_dir)

        with open(os.path.join(plugin_dir, 'requirements.txt'), "r") as requirements:
            for dep in requirements.readlines():
                # part string at any ==, ~=, <=, >=
                dep = re.split("[~=<>]=", dep.strip(), 1)[0]
                try:
                    __import__(dep)
                    QgsMessageLog.logMessage("Trying to load {}".format(dep), level=Qgis.MessageLevel.Info)
                except ImportError as e:
                    import subprocess
                    QgsMessageLog.logMessage("{} not available, installing".format(dep),
                                             level=Qgis.MessageLevel.Warning)
                    subprocess.check_call(["pip", "install", dep])

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ppqgis', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pandapower_qgis/pp.svg'
        import_icon_path = ':/plugins/pandapower_qgis/pp_import.svg'
        export_icon_path = ':/plugins/pandapower_qgis/pp_export.svg'

        self.add_action(
            icon_path=export_icon_path,
            text=self.tr(u'export to pandapower'),
            callback=self.exprt,
            parent=self.iface.mainWindow())

        self.add_action(
            icon_path=import_icon_path,
            text=self.tr(u'import from pandapower'),
            callback=self.imprt,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start_import = True
        self.first_start_export = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&pandapower QGis Plugin'),
                action)
            self.iface.removeToolBarIcon(action)

    def exprt(self):
        """Run method that performs all the real work"""
        """
        Information collected and displayed after export:
            amount bus
            amount lines
            amount lines using derived length
            amount lines containing errors
            used std_type's
        """
        initial_run=False
        # variables for summary:
        bus_count: int = 0
        line_count: int = 0
        line_len_count: int = 0
        line_error_count: int = 0
        exported_std_types: List[str] = list()

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_export:
            initial_run=True
            self.first_start_export = False
            self.dlg_export = ppExportDialog()
            self.dlg_export_summary = ppExportSummaryDialog()

        # get all layers
        layers = QgsProject.instance().mapLayers()

        layer_widget = self.dlg_export.layerSelectWidget

        layer_lookup = {}

        for layer in layers:
            if not initial_run:
                self.dlg_export.layerSelectWidget.clear()
            name = layers[layer].name()
            # add layer item with checkbox to listWidget
            list_item = QListWidgetItem(self.dlg_export.layerSelectWidget)
            list_item.setText(name)
            list_item.setCheckState(QtCore.Qt.CheckState.Checked)
            layer_widget.addItem(list_item)
            item_index = layer_widget.indexFromItem(list_item)

            # Make item name clickable. (as opposed to checkbox only)
            self.dlg_export.layerSelectWidget.itemPressed["QListWidgetItem*"].connect(
                lambda item: item.setCheckState(
                    QtCore.Qt.CheckState.Checked
                    if item.checkState() == QtCore.Qt.CheckState.Unchecked
                    else QtCore.Qt.CheckState.Unchecked
                )
            )

            layer_lookup[item_index.row()] = layer

        # show the dialog
        self.dlg_export.show()
        # Run the dialog event loop
        result = self.dlg_export.exec_()
        # See if OK was pressed
        if result:
            self.installer_func()

            # variables required for new network
            name = self.dlg_export.nameEdit.text()
            f_hz = float(self.dlg_export.frequencyEdit.text())
            sn_mva = float(self.dlg_export.refApperentPowerEdit.text())
            add_stdtypes = self.dlg_export.addStdTypes.isChecked()

            import pandapower as pp

            filters = "pandapower networks (*.json)"
            selected = "pandapower networks (*.json)"
            file = QFileDialog.getSaveFileName(None, "File Dialog", self.dir, filters, selected)[0]
            if not file:
                return

            # create empty network
            net = pp.create_empty_network(name, f_hz, sn_mva, add_stdtypes)

            # get selected layers
            selected_layers = list()
            for ind in range(self.dlg_export.layerSelectWidget.count()):
                if layer_widget.item(ind).checkState() == QtCore.Qt.CheckState.Checked:
                    selected_layers.append(layer_lookup[ind])

            # create a bus_lookup table
            bus_id_lookup = dict()
            line_layers = list()
            for layer_name in selected_layers:
                selectIds = list()
                layer = layers[layer_name]
                if not hasattr(layer, "getFeatures"):
                    continue
                # get all fields of layer
                field_names = layer.fields().names()

                features = layer.getFeatures()
                for feature in features:
                    if 'pp_type' not in field_names:
                        selectIds.append(feature.id())
                        continue
                    pp_type = feature['pp_type']
                    if pp_type not in ['bus', 'line']:
                        selectIds.append(feature.id())
                        continue
                    if pp_type == 'bus':
                        """
                        Optional properties:
                            name: str
                            pp_index: int
                            vn_kv: float
                            type: str "b", "n", "m"
                            zone: str, None
                            in_service: bool
                            max_vm_pu: float, NAN
                            min_vm_pu: float, NAN
                        """
                        props = {
                            "name": None,
                            "pp_index": None,
                            # "vn_kv": ?  # no default given.
                            "geodata": None,
                            "type": "b",
                            "zone": None,
                            "in_service": True,
                            "max_vm_pu": float("NaN"),
                            "min_vm_pu": float("NaN"),
                            "coords": None,
                        }
                        # Get optional properties if they exist
                        for key in props:
                            if key in field_names and feature[key] is not NULL:
                                props[key] = feature[key]
                        if 'vn_kv' in field_names and feature['vn_kv'] is not NULL:
                            props['vn_kv'] = feature['vn_kv']
                        else:  # not sure if this is the way to handle missing vn_kv
                            selectIds.append(feature.id())
                            continue

                        geom = feature.geometry()
                        if geom.type() == QgsWkbTypes.GeometryType.PointGeometry:
                            assert QgsWkbTypes.isSingleType(geom.wkbType())
                            geometry = geom.asPoint()
                            # QgsMessageLog.logMessage("Point: X: " + str(geometry.x()) + ", Y: " + str(geometry.y()),
                            #                         level=Qgis.MessageLevel.Info)
                            props['geodata'] = (geometry.x(), geometry.y())
                        elif geom.type() == QgsWkbTypes.GeometryType.LineGeometry:
                            assert QgsWkbTypes.isSingleType(geom.wkbType())
                            geometry = geom.asPolyline()
                            if len(geometry) > 2:
                                # bus does not support full LineStrings only start and end points
                                selectIds.append(feature.id())
                                continue
                            props['coords'] = [(geometry[0].x(), geometry[0].y()), (geometry[1].x(), geometry[1].y())]
                        else:
                            selectIds.append(feature.id())
                            continue
                        try:
                            bid = pp.create_bus(net,
                                                name=props['name'],
                                                index=props['pp_index'],
                                                vn_kv=props['vn_kv'],
                                                geodata=props['geodata'],
                                                type=props['type'],
                                                zone=props['zone'],
                                                in_service=props['in_service'],
                                                max_vm_pu=props['max_vm_pu'],
                                                min_vm_pu=props['min_vm_pu'],
                                                coords=props['coords'])
                        except UserWarning:
                            bid = pp.create_bus(net,
                                                name=props['name'],
                                                index=None,
                                                vn_kv=props['vn_kv'],
                                                geodata=props['geodata'],
                                                type=props['type'],
                                                zone=props['zone'],
                                                in_service=props['in_service'],
                                                max_vm_pu=props['max_vm_pu'],
                                                min_vm_pu=props['min_vm_pu'],
                                                coords=props['coords'])
                        bus_count += 1
                        if props['pp_index'] not in bus_id_lookup:
                            bus_id_lookup[props['pp_index']] = bid
                        else:
                            print(f'pp_index "{props["pp_index"]}" double assigned! FeatureID: {feature.id()}')

                    if pp_type == 'line' and layer_name not in line_layers:
                        line_layers.append(layer_name)
            for layer_name in line_layers:
                selectIds = list()
                layer = layers[layer_name]
                if not hasattr(layer, "getFeatures"):
                    continue
                # get all fields of layer
                field_names = layer.fields().names()

                features = layer.getFeatures()
                for feature in features:
                    if 'pp_type' not in field_names:
                        selectIds.append(feature.id())
                        continue
                    pp_type = feature['pp_type']
                    if pp_type != 'line':
                        selectIds.append(feature.id())
                        continue
                    """
                    Required properties:
                        from_bus
                        to_bus
                        length_km (if not set derivable from geometry)
                        std_type (if not a std_type in pp create it: net.create_std_type())
                    Optional properties:
                        name: str
                        index: int
                        geodata: [tuple]
                        in_service: bool
                        df: float (derating factor)
                        parallel: int
                        max_loading_percent: float
                    """
                    required = {
                        "from_bus": None,
                        "to_bus": None,
                        "std_type": None,
                    }
                    optional = {
                        "length_km": None,  # is required, will be fetched from geometry, thus moved to optional
                        "name": None,
                        "pp_index": None,
                        "geodata": None,
                        "in_service": True,
                        "df": 1.0,
                        "parallel": 1,
                        "max_loading_percent": float("NaN"),
                    }
                    uses_derived_length = False
                    # Get optional properties if they exist
                    for key in required:
                        if key not in field_names or feature[key] == NULL:
                            selectIds.append(feature.id())
                            line_error_count += 1
                            continue
                        assert key in field_names
                        assert feature[key] != NULL
                        required[key] = feature[key]

                    # check if std_type exists in pp
                    if not pp.std_type_exists(net, required["std_type"]):
                        # TODO: fill std_type data somehow
                        #  This data object is only an example and needs replacing!
                        data = {
                            "r_ohm_per_km": 0.2,
                            "x_ohm_per_km": 0.07,
                            "c_nf_per_km": 1160.0,
                            "max_i_ka": 0.4,
                            "endtemp_degree": 70.0,
                            "r0_ohm_per_km": 0.8,
                            "x0_ohm_per_km": 0.3,
                            "c0_nf_per_km":  500.0
                        }
                        pp.create_std_type(net, data=data, name=required['std_type'])
                    # track exported std types
                    if required['std_type'] not in exported_std_types:
                        exported_std_types.append(required['std_type'])

                    for key in optional:
                        if key in field_names and feature[key] != NULL:
                            optional[key] = feature[key]
                        # assert optional[key] != NULL  # This assertion fails for None
                    geom = feature.geometry()
                    # set length_km if it hadn't been provided
                    if optional['length_km'] is None:
                        optional['length_km'] = geom.length()
                        uses_derived_length = True
                    if geom.type() == QgsWkbTypes.GeometryType.LineGeometry:
                        assert QgsWkbTypes.isSingleType(geom.wkbType())
                        c = geom.asPolyline()  # c = list[QgsPointXY]
                        # QgsMessageLog.logMessage("Line: " + str(x), level=Qgis.MessageLevel.Info)

                        # lookup from_bus/to_bus
                        from_bus = None
                        to_bus = None
                        if required['from_bus'] in bus_id_lookup:
                            from_bus = bus_id_lookup[required['from_bus']]
                        if required['to_bus'] in bus_id_lookup:
                            to_bus = bus_id_lookup[required['to_bus']]

                        if from_bus is None or to_bus is None:
                            print(f'Could not find from_bus {required["from_bus"]} or to_bus {required["to_bus"]} for {feature.id()}')
                            selectIds.append(feature.id())
                            line_error_count += 1
                            continue
                        geo = []
                        for point in c:
                            geo.append((point.x(), point.y()))
                        if len(geo) > 0:
                            optional['geodata'] = geo
                        try:
                            pp.create_line(net,
                                           from_bus=from_bus,
                                           to_bus=to_bus,
                                           length_km=optional['length_km'],
                                           std_type=required['std_type'],
                                           name=optional['name'],
                                           index=optional['pp_index'],
                                           geodata=optional['geodata'],
                                           in_service=optional['in_service'],
                                           df=optional['df'],
                                           parallel=optional['parallel'],
                                           max_loading_percent=optional['max_loading_percent'])
                        except UserWarning:
                            pp.create_line(net,
                                           from_bus=from_bus,
                                           to_bus=to_bus,
                                           length_km=optional['length_km'],
                                           std_type=required['std_type'],
                                           name=optional['name'],
                                           index=None,
                                           geodata=optional['geodata'],
                                           in_service=optional['in_service'],
                                           df=optional['df'],
                                           parallel=optional['parallel'],
                                           max_loading_percent=optional['max_loading_percent'])

                        line_count += 1
                        if uses_derived_length:
                            line_len_count += 1
                        # QgsMessageLog.logMessage("Line from {0} to {1}".format(bus_found_first, bus_found_last),
                        #                         level=Qgis.MessageLevel.Info)

                    layer.selectByIds(selectIds, Qgis.SelectBehavior.AddToSelection)

            if file:
                pp.to_json(net, file)

            # Display export summary
            self.dlg_export_summary.exportedBus.setText(f'Buses exported: {bus_count}')
            self.dlg_export_summary.exportedLines.setText(f'Lines exported: {line_count} ({line_len_count})')
            self.dlg_export_summary.erroredLines.setText(f'Lines containing errors: {line_error_count}')
            self.dlg_export_summary.stdTypeList.addItems(exported_std_types)
            self.dlg_export_summary.show()

    def imprt(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start_import:
            self.first_start_import = False
            self.dlg_import = ppImportDialog()

        dlg = QFileDialog()
        # dlg.setFileMode(QFileDialog.AnyFile)
        dlg.setNameFilter("pandapower networks (*.json)")
        dlg.selectNameFilter("pandapower networks (*.json)")

        filters = "pandapower networks (*.json)"
        selected = "pandapower networks (*.json)"
        file = QFileDialog.getOpenFileName(None, "File Dialog", self.dir, filters, selected)[0]
        current_crs = int(QgsProject.instance().crs().authid().split(':')[1])

        if file:
            self.installer_func()
            import pandapower as pp
            import geo  # in a future version this should be replaced by pandapower.plotting.geo as geo
            import geojson
            net = pp.from_json(file)

            # add voltage levels to all lines
            pp.add_column_from_node_to_elements(net, 'vn_kv', True, 'line')

            self.dlg_import.BusLabel.setText("#Bus: " + str(len(net.bus)))
            self.dlg_import.LineLabel.setText("#Lines: " + str(len(net.line)))
            # attempt to set the layer name to the filename and set project crs as default
            self.dlg_import.layerNameEdit.setText(os.path.basename(file).split('.')[0])
            self.dlg_import.projectionSelect.setCrs(QgsProject.instance().crs())
            # show the dialog
            self.dlg_import.show()
            # Run the dialog event loop
            result = self.dlg_import.exec_()
            # See if OK was pressed
            if result:
                layer_name = self.dlg_import.layerNameEdit.text()
                try:
                    crs = int(self.dlg_import.projectionSelect.crs().authid().split(':')[1])
                except ValueError:
                    crs = current_crs

                root = QgsProject.instance().layerTreeRoot()
                # check if group exists
                group = root.findGroup(layer_name)
                # create group if it does not exist
                if not group:
                    group = root.addGroup(layer_name)

                voltage_levels = net.bus.vn_kv.unique()
                geo.convert_crs(net, epsg_in=crs, epsg_out=current_crs)

                for vn_kv in voltage_levels:
                    buses, lines = filter_by_voltage(net, vn_kv)

                    nodes = geo.dump_to_geojson(net, nodes=buses)
                    branches = geo.dump_to_geojson(net, branches=lines)

                    # create bus and line layers
                    bus_layer = QgsVectorLayer(geojson.dumps(nodes), layer_name + "_" + str(vn_kv) + "_bus", "ogr")
                    line_layer = QgsVectorLayer(geojson.dumps(branches), layer_name + "_" + str(vn_kv) + "_line", "ogr")
                    # add layers to group
                    QgsProject.instance().addMapLayer(bus_layer, False)
                    QgsProject.instance().addMapLayer(line_layer, False)
                    group.addLayer(bus_layer)
                    group.addLayer(line_layer)

                    # Move layers above TileLayer
                    root.setHasCustomLayerOrder(True)
                    order = root.customLayerOrder()
                    order.insert(0, order.pop())
                    order.insert(0, order.pop())
                    root.setCustomLayerOrder(order)
